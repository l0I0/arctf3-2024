from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import asyncio
from environs import Env
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import select, Column, Integer, String, Boolean, update, ForeignKey, DateTime
from sqlalchemy.ext.declarative import declarative_base

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env = Env()
env.read_env()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = env("TELEGRAM_BOT_TOKEN")
DATABASE_URL = env("POSTGRES_URL_ASYNC")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_async_engine(DATABASE_URL)
async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
Base = declarative_base()

# –ú–æ–¥–µ–ª–∏
class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    username = Column(String)
    is_verified = Column(Boolean, default=False)
    verification_code = Column(String, nullable=True)
    telegram_id = Column(String, nullable=True)

class Election(Base):
    __tablename__ = "elections"
    id = Column(Integer, primary_key=True)
    start_time = Column(DateTime)
    end_time = Column(DateTime)
    winner_id = Column(Integer, ForeignKey('candidates.id'), nullable=True)
    finished = Column(Boolean, default=False)

class Candidate(Base):
    __tablename__ = "candidates"
    id = Column(Integer, primary_key=True)
    election_id = Column(Integer)
    user_id = Column(Integer)
    name = Column(String)
    votes = Column(Integer, default=0)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            # [KeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")],
            [KeyboardButton(text="‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è")],
            [KeyboardButton(text="üó≥ –ú–æ–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã")],
            [KeyboardButton(text="üèÜ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑")]
        ],
        resize_keyboard=True
    )
    return keyboard

@dp.message(Command(commands=['start']))
async def send_welcome(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è' "
        "–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
        reply_markup=get_main_keyboard()
    )

@dp.message(lambda message: message.text == "‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è") 
async def start_verification(message: types.Message):
    await message.reply(
        "–î–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /verify –∏ –≤–∞—à –∫–æ–¥.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: /verify ABC123"
    )

@dp.message(Command(commands=['verify']))
async def verify_user(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        code = message.text.split()[1]
        telegram_id = str(message.from_user.id)
        
        async with async_session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç Telegram ID
            existing_user = await session.execute(
                select(User).where(User.telegram_id == telegram_id)
            )
            if existing_user.scalar_one_or_none():
                await message.reply(
                    "‚ùå –≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n"
                    "–û–¥–∏–Ω Telegram –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏."
                )
                return
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            result = await session.execute(
                select(User).where(User.verification_code == code)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await message.reply(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
                return
            
            if user.is_verified:
                await message.reply("‚úÖ –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stmt = (
                update(User)
                .where(User.id == user.id)
                .values(
                    is_verified=True,
                    telegram_id=telegram_id,
                    verification_code=None  # –û—á–∏—â–∞–µ–º –∫–æ–¥ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                )
            )
            await session.execute(stmt)
            await session.commit()
            
            await message.reply(
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞!\n"
                "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º."
            )
            
    except IndexError:
        await message.reply(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /verify –ö–û–î_–í–ï–†–ò–§–ò–ö–ê–¶–ò–ò"
        )
    except Exception as e:
        print(f"Error: {e}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(Command(commands=['users']))
async def show_users(message: types.Message):
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        result = await session.execute(select(User))
        users = result.scalars().all()
        
        if not users:
            await message.reply("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            verified_status = "‚úÖ" if user.is_verified else "‚ùå"
            users_text += f"ID: {user.id}\n"
            users_text += f"–ò–º—è: {user.username}\n"
            users_text += f"–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {verified_status}\n"
            users_text += f"Telegram ID: {user.telegram_id or '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}\n"
            users_text += "-------------------\n"
        
        await message.reply(users_text)

# @dp.message(lambda message: message.text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
# async def handle_users_button(message: types.Message):
#     await show_users(message)

@dp.message(lambda message: message.text == "üó≥ –ú–æ–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã")
async def show_my_candidates(message: types.Message):
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        result = await session.execute(
            select(User).where(User.telegram_id == str(message.from_user.id))
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.reply("–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∫ –±–æ—Ç—É.")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(Candidate).where(Candidate.user_id == user.id)
            .order_by(Candidate.election_id.desc())
        )
        candidates = result.scalars().all()
        
        if not candidates:
            await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤—ã–¥–≤–∏–Ω—É—Ç—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        text = "–í–∞—à–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã:\n\n"
        for candidate in candidates:
            text += f"ID –≤—ã–±–æ—Ä–æ–≤: {candidate.election_id}\n"
            text += f"–ò–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: {candidate.name}\n"
            text += f"–ì–æ–ª–æ—Å–æ–≤: {candidate.votes}\n"
            text += "-------------------\n"
            
        await message.reply(text)

@dp.message(lambda message: message.text == "üèÜ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑")
async def get_prize(message: types.Message):
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        result = await session.execute(
            select(User).where(User.telegram_id == str(message.from_user.id))
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.reply("–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∫ –±–æ—Ç—É.")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–±–µ–¥–∏–≤—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(Candidate)
            .join(Election, Election.winner_id == Candidate.id)
            .where(
                Candidate.user_id == user.id,
                Election.finished == True
            )
            .order_by(Election.end_time.desc())
            .limit(1)
        )
        winning_candidate = result.scalar_one_or_none()
        
        if not winning_candidate:
            await message.reply("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–±–µ–¥–∏–≤—à–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–∑
        await message.reply(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!\n"
            "–í–∞—à –ø—Ä–∏–∑: arctf{w1nn3r_0f_th3_3l3ct10n}\n\n"
            f"–ü–æ–±–µ–¥–∏–≤—à–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç: {winning_candidate.name}"
        )

async def main():
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())